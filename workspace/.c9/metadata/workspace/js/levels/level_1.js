{"filter":false,"title":"level_1.js","tooltip":"/js/levels/level_1.js","undoManager":{"mark":11,"position":11,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":201,"column":2},"action":"remove","lines":["Skinny_Ninja.level_1 = function (game) { ","\t//\tWhen a State is added to Phaser it automatically has the following properties set on it, even if they already exist:","    this.game;\t\t//\ta reference to the currently running game","    this.add;\t\t//\tused to add sprites, text, groups, etc","    this.camera;\t//\ta reference to the game camera","    this.cache;\t\t//\tthe game cache","    this.input;\t\t//\tthe global input manager (you can access this.input.keyboard, this.input.mouse, as well from it)","    this.load;\t\t//\tfor preloading assets","    this.math;\t\t//\tlots of useful common math operations","    this.sound;\t\t//\tthe sound manager - add a sound, play one, set-up markers, etc","    this.stage;\t\t//\tthe game stage","    this.time;\t\t//\tthe clock","    this.tweens;    //  the tween manager","    this.state;\t    //\tthe state manager","    this.world;\t\t//\tthe game world","    this.particles;\t//\tthe particle manager","    this.physics;\t//\tthe physics manager","    this.rnd;\t\t//\tthe repeatable random number generator","    //\tYou can use any of these from any function within this State.","    //\tBut do consider them as being 'reserved words', i.e. don't create a property for your own game called \"world\" or you'll over-write the world reference.","};","","//variables for the classes","var hero = null;","var enemy = null;","var item = null;","var gui = null;","var pause = null;","","//variables for the world, which is defined here","var map = null;","var tile_layer_1 = null;","var layer_walls_1 = null;","","//global variables","var game_timer = null;","var music = null;","","Skinny_Ninja.level_1.prototype = {","","\tcreate: function () {","","        //necessary for slow motion","    \tthis.game.time.advancedTiming = true;","        this.game.time.desiredFps = 60;","        this.game.time.slowMotion = 1.0;","","        //start the game timer","        game_timer = this.game.time.create(false);","        game_timer.start();","","        //start the music","        music = this.game.add.audio('song', 0.5, true);","        music.play();","","        //create the pause instance","    \tpause = new Pause(this.game);","","        //build level","        this.build_world();","        this.build_player();","        this.build_enemies();","        this.build_items();","    \tthis.build_GUI();","    \t","\t},","","    build_world: function () {","","        //the world","        this.game.world.setBounds(0, 0, 3200, 600);","        this.game.physics.startSystem(Phaser.Physics.ARCADE);","","        //background","        this.background = this.add.tileSprite(0, -200, 6400, 600, 'background_far');","        this.background.fixedToCamera = true;","        this.background_near = this.add.tileSprite(0, 0, 6400, 600, 'background_near');"," ","        //tilemap","        map = this.game.add.tilemap('map_level_0');","        ","        //the first parameter is the tileset name as specified in Tiled","        //the second is the key to the asset","        map.addTilesetImage('dirt', 'dirt');","        map.addTilesetImage('grass', 'grass');","        map.addTilesetImage('wall', 'wall');","        ","        //create layers","        tile_layer_1 = map.createLayer('ground1');","        layer_walls_1 = map.createLayer('walls1');","        ","        //collision on blockedLayer","        map.setCollisionBetween(1, 1000, true, 'ground1');","        map.setCollisionBetween(1, 1000, true, 'walls1');","        ","        //resizes the game world to match the layer dimensions","        tile_layer_1.resizeWorld();","        \t","    },","","    build_player: function () {","        ","        //create an instance for the player","        hero = new Hero(this.game); ","        ","        //create the player","        hero.create(50, 500);","    ","    }, ","","    build_enemies: function () {","    ","        //create an instance for the enemies","        enemy = new Enemy(this.game);","        ","        //create the enemies","        //type 0 = ninja","        enemy.create(0, 400, 400);","        enemy.create(0, 1500, 400);","        enemy.create(0, 1600, 400);","        enemy.create(0, 450, 40);","        enemy.create(0, 840, 300);","        ","        //type 1 = ghost","        enemy.create(1, 500, 40);","","    },","    ","    build_items: function () {","        ","        //create an instance for the items","        item = new Item(this.game);","        ","        //create the items","        //type 0 = katana_0","        item.create(0, 400, 80);","        ","        //type 1 = ruby (doesn't exist upon creation)","        item.create(1, null, null);","        ","    },","    ","    build_GUI: function () {","    ","        //create an instance for the GUI","        gui = new GUI(this.game);","        ","        //create the GUI","        gui.create();","    ","    }, ","","\tupdate: function () {","\t    ","\t    //update all necessary objects","        hero.update();","        enemy.update();","        item.update();","        gui.update(); ","","\t},","","    render: function () {","    ","    \t//for (var i = 0; i < ledge_trigger.length; i++)","    \t//this.game.debug.geom(ledge_trigger.getAt(i).getBounds());","","        //for (var i = 0; i < ninjas.length; i++)","        //this.game.debug.geom(aggro_trigger[i].getBounds());","        //this.game.debug.geom(ninjas.getAt(i).getBounds());","        //this.game.debug.timer(idle_timer[1], 200, 50);","        //this.game.debug.timer(run_timer[1], 200, 120);","        ","        //this.game.debug.geom(katana_0.getBounds());","","    },\t","    ","\tshutdown: function () {","\t    ","\t    player.destroy();","","        ninjas.destroy(true, false);","        ghosts.destroy(true, false);","        items_group.destroy(true, false);","        ","        map.destroy();","        tile_layer_1.destroy();","        layer_walls_1.destroy();","        ","        this.background.stopScroll();","        this.background.alive = false;","        this.background.exists = false;","        this.background.visible = false;","    ","        this.game.world.removeAll(); //just a sweeper","    ","        score = 0;","        music.stop();","        this.time.reset;","\t},","","};"]},{"start":{"row":0,"column":0},"end":{"row":203,"column":2},"action":"insert","lines":["Skinny_Ninja.level_0 = function (game) { ","\t//\tWhen a State is added to Phaser it automatically has the following properties set on it, even if they already exist:","    this.game;\t\t//\ta reference to the currently running game","    this.add;\t\t//\tused to add sprites, text, groups, etc","    this.camera;\t//\ta reference to the game camera","    this.cache;\t\t//\tthe game cache","    this.input;\t\t//\tthe global input manager (you can access this.input.keyboard, this.input.mouse, as well from it)","    this.load;\t\t//\tfor preloading assets","    this.math;\t\t//\tlots of useful common math operations","    this.sound;\t\t//\tthe sound manager - add a sound, play one, set-up markers, etc","    this.stage;\t\t//\tthe game stage","    this.time;\t\t//\tthe clock","    this.tweens;    //  the tween manager","    this.state;\t    //\tthe state manager","    this.world;\t\t//\tthe game world","    this.particles;\t//\tthe particle manager","    this.physics;\t//\tthe physics manager","    this.rnd;\t\t//\tthe repeatable random number generator","    //\tYou can use any of these from any function within this State.","    //\tBut do consider them as being 'reserved words', i.e. don't create a property for your own game called \"world\" or you'll over-write the world reference.","};","","//variables for the classes","var hero = null;","var enemy = null;","var item = null;","var gui = null;","var pause = null;","","//variables for the world, which is defined here","var map = null;","var layer_ground = null;","var layer_walls = null;","var layer_overlay = null;","","//global variables","var game_timer = null;","var music = null;","","Skinny_Ninja.level_0.prototype = {","","\tcreate: function () {","","        //necessary for slow motion","    \tthis.game.time.advancedTiming = true;","        this.game.time.desiredFps = 60;","        this.game.time.slowMotion = 1.0;","","        //start the game timer","        game_timer = this.game.time.create(false);","        game_timer.start();","","        //start the music","        music = this.game.add.audio('song', 0.5, true);","        music.play();","","        //create the pause instance","    \tpause = new Pause(this.game);","","        //build level","        this.build_world();","        this.build_player();","        this.build_enemies();","        this.build_items();","    \tthis.build_GUI();","    \t","\t},","","    build_world: function () {","","        //the world","        this.game.physics.startSystem(Phaser.Physics.ARCADE);","","        //background","        this.background = this.add.tileSprite(0, 0, 6400, 600, 'background_far');","        this.background.fixedToCamera = true;","        this.background_near = this.add.tileSprite(0, 0, 3200, 3200, 'background_near');","","        //tilemap","        map = this.game.add.tilemap('map_level_0');","","        //the first parameter is the tileset name as specified in Tiled","        //the second is the key to the asset","        map.addTilesetImage('spritesheet', 'tiles_spritesheet');","","        //create layers","        layer_ground = map.createLayer('tile_ground');","        layer_walls = map.createLayer('tile_walls');","        layer_overlay = map.createLayer('tile_overlay');","","        //collision on blockedLayer","        map.setCollisionBetween(1, 1000, true, 'tile_ground');","        map.setCollisionBetween(1, 1000, true, 'tile_walls');","","        //resizes the game world to match the layer dimensions","        layer_ground.resizeWorld();","","    },","","    build_player: function () {","        ","        //create an instance for the player","        hero = new Hero(this.game); ","        ","        //create the player","        hero.create(50, 500);","    ","    }, ","","    build_enemies: function () {","    ","        //create an instance for the enemies","        enemy = new Enemy(this.game);","        ","        //create the enemies","        //type 0 = ninja","        enemy.create(0, 400, 400);","        enemy.create(0, 1500, 400);","        enemy.create(0, 1600, 400);","        enemy.create(0, 450, 40);","        enemy.create(0, 840, 300);","        ","        //type 1 = ghost","        enemy.create(1, 500, 40);","","    },","    ","    build_items: function () {","        ","        //create an instance for the items","        item = new Item(this.game);","        ","        //create the items","        //type 0 = katana_0","        item.create(0, 400, 80);","        ","        //type 1 = ruby (doesn't exist upon creation)","        item.create(1, this.game.world.width - 150, 400);","        ","    },","    ","    build_GUI: function () {","    ","        //create an instance for the GUI","        gui = new GUI(this.game);","        ","        //create the GUI","        gui.create();","    ","    }, ","","\tupdate: function () {","\t    ","\t    //update all necessary objects","        hero.update();","        enemy.update();","        item.update();","        gui.update(); ","","\t},","","    render: function () {","    ","    \t//for (var i = 0; i < ledge_trigger.length; i++)","    \t//this.game.debug.geom(ledge_trigger.getAt(i).getBounds());","","        //for (var i = 0; i < ninjas.length; i++)","        //this.game.debug.geom(aggro_trigger[i].getBounds());","        //this.game.debug.geom(ninjas.getAt(i).getBounds());","        //this.game.debug.timer(idle_timer[1], 200, 50);","        //this.game.debug.timer(run_timer[1], 200, 120);","        ","        //this.game.debug.geom(katana_0.getBounds());","","    },\t","    ","\tshutdown: function () {","        ","        //let the game read input again, just in case","        this.game.input.enabled = true;","","\t    //destroy the sprites","\t    player.destroy();","        ninjas.destroy(true, false);","        ghosts.destroy(true, false);","        items_group.destroy(true, false);","        ","        //destroy the world","        map.destroy();","        layer_ground.destroy();","        layer_walls.destroy();","        layer_overlay.destroy();","        this.background.destroy();","","        //just a sweeper","        this.game.world.removeAll(); ","    ","        //take care of various elements","        score = 0;","        music.stop();","        this.time.reset;","\t},","","};"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":19},"end":{"row":0,"column":20},"action":"remove","lines":["0"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":19},"end":{"row":0,"column":20},"action":"insert","lines":["1"]}]}],[{"group":"doc","deltas":[{"start":{"row":39,"column":19},"end":{"row":39,"column":20},"action":"remove","lines":["0"]}]}],[{"group":"doc","deltas":[{"start":{"row":39,"column":19},"end":{"row":39,"column":20},"action":"insert","lines":["1"]}]}],[{"group":"doc","deltas":[{"start":{"row":105,"column":24},"end":{"row":105,"column":25},"action":"remove","lines":["5"]}]}],[{"group":"doc","deltas":[{"start":{"row":105,"column":24},"end":{"row":105,"column":25},"action":"insert","lines":["3"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":203,"column":2},"action":"remove","lines":["Skinny_Ninja.level_1 = function (game) { ","\t//\tWhen a State is added to Phaser it automatically has the following properties set on it, even if they already exist:","    this.game;\t\t//\ta reference to the currently running game","    this.add;\t\t//\tused to add sprites, text, groups, etc","    this.camera;\t//\ta reference to the game camera","    this.cache;\t\t//\tthe game cache","    this.input;\t\t//\tthe global input manager (you can access this.input.keyboard, this.input.mouse, as well from it)","    this.load;\t\t//\tfor preloading assets","    this.math;\t\t//\tlots of useful common math operations","    this.sound;\t\t//\tthe sound manager - add a sound, play one, set-up markers, etc","    this.stage;\t\t//\tthe game stage","    this.time;\t\t//\tthe clock","    this.tweens;    //  the tween manager","    this.state;\t    //\tthe state manager","    this.world;\t\t//\tthe game world","    this.particles;\t//\tthe particle manager","    this.physics;\t//\tthe physics manager","    this.rnd;\t\t//\tthe repeatable random number generator","    //\tYou can use any of these from any function within this State.","    //\tBut do consider them as being 'reserved words', i.e. don't create a property for your own game called \"world\" or you'll over-write the world reference.","};","","//variables for the classes","var hero = null;","var enemy = null;","var item = null;","var gui = null;","var pause = null;","","//variables for the world, which is defined here","var map = null;","var layer_ground = null;","var layer_walls = null;","var layer_overlay = null;","","//global variables","var game_timer = null;","var music = null;","","Skinny_Ninja.level_1.prototype = {","","\tcreate: function () {","","        //necessary for slow motion","    \tthis.game.time.advancedTiming = true;","        this.game.time.desiredFps = 60;","        this.game.time.slowMotion = 1.0;","","        //start the game timer","        game_timer = this.game.time.create(false);","        game_timer.start();","","        //start the music","        music = this.game.add.audio('song', 0.5, true);","        music.play();","","        //create the pause instance","    \tpause = new Pause(this.game);","","        //build level","        this.build_world();","        this.build_player();","        this.build_enemies();","        this.build_items();","    \tthis.build_GUI();","    \t","\t},","","    build_world: function () {","","        //the world","        this.game.physics.startSystem(Phaser.Physics.ARCADE);","","        //background","        this.background = this.add.tileSprite(0, 0, 6400, 600, 'background_far');","        this.background.fixedToCamera = true;","        this.background_near = this.add.tileSprite(0, 0, 3200, 3200, 'background_near');","","        //tilemap","        map = this.game.add.tilemap('map_level_0');","","        //the first parameter is the tileset name as specified in Tiled","        //the second is the key to the asset","        map.addTilesetImage('spritesheet', 'tiles_spritesheet');","","        //create layers","        layer_ground = map.createLayer('tile_ground');","        layer_walls = map.createLayer('tile_walls');","        layer_overlay = map.createLayer('tile_overlay');","","        //collision on blockedLayer","        map.setCollisionBetween(1, 1000, true, 'tile_ground');","        map.setCollisionBetween(1, 1000, true, 'tile_walls');","","        //resizes the game world to match the layer dimensions","        layer_ground.resizeWorld();","","    },","","    build_player: function () {","        ","        //create an instance for the player","        hero = new Hero(this.game); ","        ","        //create the player","        hero.create(50, 300);","    ","    }, ","","    build_enemies: function () {","    ","        //create an instance for the enemies","        enemy = new Enemy(this.game);","        ","        //create the enemies","        //type 0 = ninja","        enemy.create(0, 400, 400);","        enemy.create(0, 1500, 400);","        enemy.create(0, 1600, 400);","        enemy.create(0, 450, 40);","        enemy.create(0, 840, 300);","        ","        //type 1 = ghost","        enemy.create(1, 500, 40);","","    },","    ","    build_items: function () {","        ","        //create an instance for the items","        item = new Item(this.game);","        ","        //create the items","        //type 0 = katana_0","        item.create(0, 400, 80);","        ","        //type 1 = ruby (doesn't exist upon creation)","        item.create(1, this.game.world.width - 150, 400);","        ","    },","    ","    build_GUI: function () {","    ","        //create an instance for the GUI","        gui = new GUI(this.game);","        ","        //create the GUI","        gui.create();","    ","    }, ","","\tupdate: function () {","\t    ","\t    //update all necessary objects","        hero.update();","        enemy.update();","        item.update();","        gui.update(); ","","\t},","","    render: function () {","    ","    \t//for (var i = 0; i < ledge_trigger.length; i++)","    \t//this.game.debug.geom(ledge_trigger.getAt(i).getBounds());","","        //for (var i = 0; i < ninjas.length; i++)","        //this.game.debug.geom(aggro_trigger[i].getBounds());","        //this.game.debug.geom(ninjas.getAt(i).getBounds());","        //this.game.debug.timer(idle_timer[1], 200, 50);","        //this.game.debug.timer(run_timer[1], 200, 120);","        ","        //this.game.debug.geom(katana_0.getBounds());","","    },\t","    ","\tshutdown: function () {","        ","        //let the game read input again, just in case","        this.game.input.enabled = true;","","\t    //destroy the sprites","\t    player.destroy();","        ninjas.destroy(true, false);","        ghosts.destroy(true, false);","        items_group.destroy(true, false);","        ","        //destroy the world","        map.destroy();","        layer_ground.destroy();","        layer_walls.destroy();","        layer_overlay.destroy();","        this.background.destroy();","","        //just a sweeper","        this.game.world.removeAll(); ","    ","        //take care of various elements","        score = 0;","        music.stop();","        this.time.reset;","\t},","","};"]},{"start":{"row":0,"column":0},"end":{"row":202,"column":2},"action":"insert","lines":["Skinny_Ninja.level_0 = function(game) { ","\t//\tWhen a State is added to Phaser it automatically has the following properties set on it, even if they already exist:","    this.game;\t\t//\ta reference to the currently running game","    this.add;\t\t//\tused to add sprites, text, groups, etc","    this.camera;\t//\ta reference to the game camera","    this.cache;\t\t//\tthe game cache","    this.input;\t\t//\tthe global input manager (you can access this.input.keyboard, this.input.mouse, as well from it)","    this.load;\t\t//\tfor preloading assets","    this.math;\t\t//\tlots of useful common math operations","    this.sound;\t\t//\tthe sound manager - add a sound, play one, set-up markers, etc","    this.stage;\t\t//\tthe game stage","    this.time;\t\t//\tthe clock","    this.tweens;    //  the tween manager","    this.state;\t    //\tthe state manager","    this.world;\t\t//\tthe game world","    this.particles;\t//\tthe particle manager","    this.physics;\t//\tthe physics manager","    this.rnd;\t\t//\tthe repeatable random number generator","    //\tYou can use any of these from any function within this State.","    //\tBut do consider them as being 'reserved words', i.e. don't create a property for your own game called \"world\" or you'll over-write the world reference.","};","","//variables for the classes","var hero = null;","var enemy = null;","var item = null;","var gui = null;","var pause = null;","","//variables for the world, which is defined here","var map = null;","var layer_ground = null;","var layer_walls = null;","var layer_overlay = null;","","//global variables","var game_timer = null;","var music = null;","","Skinny_Ninja.level_0.prototype = {","","\tcreate: function () {","","        //necessary for slow motion","    \tthis.game.time.advancedTiming = true;","        this.game.time.desiredFps = 60;","        this.game.time.slowMotion = 1.0;","","        //start the game timer","        game_timer = this.game.time.create(false);","        game_timer.start();","","        //start the music","        music = this.game.add.audio('song', 0.5, true);","        music.play();","","        //create the pause instance","    \tpause = new Pause(this.game);","","        //build level","        this.build_world();","        this.build_player();","        this.build_enemies();","        this.build_items();","    \tthis.build_GUI();","    \t","\t},","","    build_world: function () {","","        //the world","        this.game.physics.startSystem(Phaser.Physics.ARCADE);","","        //background","        this.background = this.add.tileSprite(0, 0, 6400, 600, 'background_far');","        this.background.fixedToCamera = true;","        this.background_near = this.add.tileSprite(0, 0, 3200, 3200, 'background_near');","","        //tilemap","        map = this.game.add.tilemap('map_level_0');","","        //the first parameter is the tileset name as specified in Tiled","        //the second is the key to the asset","        map.addTilesetImage('spritesheet', 'tiles_spritesheet');","","        //create layers","        layer_ground = map.createLayer('tile_ground');","        layer_walls = map.createLayer('tile_walls');","        layer_overlay = map.createLayer('tile_overlay');","","        //collision on blockedLayer","        map.setCollisionBetween(1, 1000, true, 'tile_ground');","        map.setCollisionBetween(1, 1000, true, 'tile_walls');","","        //resizes the game world to match the layer dimensions","        layer_ground.resizeWorld();","","    },","","    build_player: function () {","        ","        //create an instance for the player","        hero = new Hero(this.game); ","        ","        //create the player","        hero.create(100, this.game.world.height - 100);","    ","    }, ","","    build_enemies: function () {","    ","        //create an instance for the enemies","        enemy = new Enemy(this.game);","        ","        //create the enemies","        //type 0 = ninja","        enemy.create(0, 400, 400);","        ","        //type 1 = ghost","        enemy.create(1, 500, 40);","","    },","    ","    build_items: function () {","        ","        //create an instance for the items","        item = new Item(this.game);","        ","        //create the items","        //type 0 = katana_0","        item.create(0, 350, 80);","        ","        //type 1 = ruby (doesn't exist upon creation)","        item.create(1, this.game.world.width - 150, 400);","        ","    },","    ","    build_GUI: function () {","    ","        //create an instance for the GUI","        gui = new GUI(this.game);","        ","        //create the GUI","        gui.create();","    ","    }, ","","\tupdate: function () {","\t    ","\t    //update all necessary objects","        hero.update();","        enemy.update();","        item.update();","        gui.update(); ","","\t},","","    render: function () {","    ","    \t//for (var i = 0; i < ledge_trigger.length; i++)","    \t//this.game.debug.geom(ledge_trigger.getAt(i).getBounds());","","        //for (var i = 0; i < ninjas.length; i++)","        //this.game.debug.geom(aggro_trigger[i].getBounds());","        //this.game.debug.geom(ninjas.getAt(i).getBounds());","        //this.game.debug.timer(idle_timer[1], 200, 50);","        //this.game.debug.timer(run_timer[1], 200, 120);","        ","        //this.game.debug.geom(katana_0.getBounds());","","    },\t","    ","\tshutdown: function () {","        ","        //in case player was invisible","        this.game.time.slowMotion = 1.0;","","        //let the game read input again, just in case","        this.game.input.enabled = true;","","\t    //destroy the sprites","\t    player.destroy();","        ninjas.destroy(true, false);","        ghosts.destroy(true, false);","        items_group.destroy(true, false);","        ","        //destroy the world","        map.destroy();","        layer_ground.destroy();","        layer_walls.destroy();","        layer_overlay.destroy();","        this.background.destroy();","","        //just a sweeper","        this.game.world.removeAll(); ","    ","        //take care of various elements","        score = 0;","        music.stop();","        this.time.reset;","\t},","","};"]}]}],[{"group":"doc","deltas":[{"start":{"row":39,"column":19},"end":{"row":39,"column":20},"action":"remove","lines":["0"]}]}],[{"group":"doc","deltas":[{"start":{"row":39,"column":19},"end":{"row":39,"column":20},"action":"insert","lines":["1"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":19},"end":{"row":0,"column":20},"action":"remove","lines":["0"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":19},"end":{"row":0,"column":20},"action":"insert","lines":["1"]}]}]]},"ace":{"folds":[{"start":{"row":0,"column":39},"end":{"row":20,"column":0},"placeholder":"..."},{"start":{"row":41,"column":22},"end":{"row":66,"column":1},"placeholder":"..."},{"start":{"row":68,"column":30},"end":{"row":97,"column":4},"placeholder":"..."},{"start":{"row":99,"column":31},"end":{"row":107,"column":4},"placeholder":"..."},{"start":{"row":109,"column":32},"end":{"row":121,"column":4},"placeholder":"..."},{"start":{"row":123,"column":30},"end":{"row":135,"column":4},"placeholder":"..."},{"start":{"row":137,"column":28},"end":{"row":145,"column":4},"placeholder":"..."},{"start":{"row":147,"column":22},"end":{"row":155,"column":1},"placeholder":"..."},{"start":{"row":157,"column":25},"end":{"row":170,"column":4},"placeholder":"..."},{"start":{"row":172,"column":24},"end":{"row":200,"column":1},"placeholder":"..."}],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":22,"column":21},"end":{"row":22,"column":21},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1422741346242,"hash":"414c4853405b23977cd8d3155193386f5895f0dd"}