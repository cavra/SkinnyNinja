{"filter":false,"title":"level_1.js","tooltip":"/js/level_1.js","undoManager":{"mark":4,"position":4,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":238,"column":2},"action":"remove","lines":["BasicGame.level_1 = function (game) { ","\t//\tWhen a State is added to Phaser it automatically has the following properties set on it, even if they already exist:","    this.game;\t\t//\ta reference to the currently running game","    this.add;\t\t//\tused to add sprites, text, groups, etc","    this.camera;\t//\ta reference to the game camera","    this.cache;\t\t//\tthe game cache","    this.input;\t\t//\tthe global input manager (you can access this.input.keyboard, this.input.mouse, as well from it)","    this.load;\t\t//\tfor preloading assets","    this.math;\t\t//\tlots of useful common math operations","    this.sound;\t\t//\tthe sound manager - add a sound, play one, set-up markers, etc","    this.stage;\t\t//\tthe game stage","    this.time;\t\t//\tthe clock","    this.tweens;    //  the tween manager","    this.state;\t    //\tthe state manager","    this.world;\t\t//\tthe game world","    this.particles;\t//\tthe particle manager","    this.physics;\t//\tthe physics manager","    this.rnd;\t\t//\tthe repeatable random number generator","    //\tYou can use any of these from any function within this State.","    //\tBut do consider them as being 'reserved words', i.e. don't create a property for your own game called \"world\" or you'll over-write the world reference.","","    //world","    this.ground = null;","    this.ledge = null;","    this.background = null;","","};","","var hero;","var enemy;","var item;","var gui;","var pause;","var collision;","","var grounds;","var walls;","var ledges;","var ledge_trigger;","","var gameTimer = null;","var music = null;","","BasicGame.level_1.prototype = {","","\tcreate: function () {","","        gameTimer = this.game.time.create(false);","        gameTimer.start();","","        music = this.game.add.audio('song', 0.5, true);","        music.play();","","    \tpause = new Pause(this.game);","","    \tcollision = new Collisions(this.game);","","        this.build_world();","        this.build_player();","        this.build_enemies();","        this.build_items();","    \tthis.build_GUI();","    \t","\t},","","    build_world: function () {","","        //the world","        this.game.world.setBounds(0, 0, 3200, 600);","        this.game.physics.startSystem(Phaser.Physics.ARCADE);","","        //background","        this.background = this.add.tileSprite(0, -200, 6400, 600, 'background_far');","        this.background.fixedToCamera = true;","        this.background_near = this.add.tileSprite(0, 0, 6400, 600, 'background_near');","        ","        //the ground","        grounds = this.game.add.group();","        grounds.enableBody = true;","        ","    \tfor (var i = 0; i < this.game.world.width/800; i++)","        {","            this.ground = grounds.create(i * 800, this.world.height - 64, 'ground');","            this.ground.scale.setTo(2, 2);","            this.ground.body.immovable = true;","        }","","        //the walls","    \twalls = this.game.add.group();","        walls.enableBody = true;","        ","    \tthis.ledge = walls.create(0, 100, 'wall');","    \tthis.ledge.body.immovable = true;","    \tthis.ledge = walls.create(200, 100, 'wall');","    \tthis.ledge.body.immovable = true;","        this.ledge.anchor.setTo(0.5, 0);","        this.ledge.scale.x = -1;","    \t","    \t//the ledges","    \tledges = this.game.add.group();","        ledges.enableBody = true;","        ","    \tfor (var i = 1; i < this.game.world.width/800; i++)","        {","            this.ledge = ledges.create(i * 800, 400, 'ground');","            this.ledge.body.immovable = true;","        }","        ","    \tthis.ledge = ledges.create(184, 100, 'ground');","    \tthis.ledge.body.immovable = true;","    \t","        //the ledge trigger (for enemies; transparent)","        ledge_trigger = this.game.add.group();","        ledge_trigger.enableBody = true;","","    \tfor (var i = 0; i < ledges.length; i++)","        {","            var x = ledges.getAt(i).x;","            var y = ledges.getAt(i).y;","            var xx = ledges.getAt(i).body.x + ledges.getAt(i).body.width;","            ","            this.trigger = ledge_trigger.create(x, y, 'singularity');","            this.trigger.body.immovable = true;","            this.trigger.anchor.setTo(1, 1);","            this.trigger.scale.setTo(10, 30);","            this.trigger = ledge_trigger.create(xx , y, 'singularity');","            this.trigger.body.immovable = true;","            this.trigger.anchor.setTo(0, 1);","            this.trigger.scale.setTo(10, 30);","        }","    \t","    \t","    },","","    build_player: function () {","          ","        hero = new Hero(this.game); //create an instance for the player","        ","        hero.create(50, 500); //actually create the player","    ","    }, ","","    build_enemies: function () {","    ","        enemy = new Enemy(this.game);","        ","        enemy.create(0, 400, 400);","        enemy.create(0, 500, 400);","        enemy.create(0, 600, 400);","        enemy.create(0, 450, 40);","        ","        enemy.create(1, 500, 40);","","    },","    ","    build_items: function () {","        ","        item = new Item(this.game);","        ","        item.create(0, 400, 80);","        item.create(1, null, null);","        ","    },","    ","    build_GUI: function () {","    ","        gui = new GUI(this.game);","        ","        gui.create();","    ","    }, ","","\tupdate: function () {","\t   ","        hero.update();","        enemy.update();","        item.update();","        gui.update(); ","","\t},","","    render: function () {","    ","    \t//for (var i = 0; i < ledge_trigger.length; i++)","    \t//this.game.debug.geom(ledge_trigger.getAt(i).getBounds());","","        //for (var i = 0; i < ninjas.length; i++)","        //this.game.debug.geom(aggro_trigger[i].getBounds());","        //this.game.debug.geom(ninjas.getAt(i).getBounds());","        ","        //this.game.debug.geom(aggro_trigger.getBounds());","        //this.game.debug.geom(katana_0.getBounds());","        //this.game.debug.timer(idle_timer[1], 200, 50);","        //this.game.debug.timer(run_timer[1], 200, 120);","","    },\t","    ","\tshutdown: function () {","\t    ","\t    player.destroy();","","        grounds.destroy(true, false);","        ledges.destroy(true, false);","        walls.destroy(true, false);","        ninjas.destroy(true, false);","        ghosts.destroy(true, false);","        items_group.destroy(true, false);","        ","        this.background.stopScroll();","        this.background.alive = false;","        this.background.exists = false;","        this.background.visible = false;","    ","        this.game.world.removeAll(); //just a sweeper","    ","        score = 0;","        music.stop();","        this.time.reset;","\t},","\t","\tpaused: function () {","\t    ","\t    //pause.create();","\t   ","\t},","","    pauseUpdate: function () {","        ","        //pause.update();","        ","    },","    ","    resume: function () {","        ","        //pause.unpause();","        ","    }","","};"]},{"start":{"row":0,"column":0},"end":{"row":239,"column":2},"action":"insert","lines":["BasicGame.level_0 = function (game) { ","\t//\tWhen a State is added to Phaser it automatically has the following properties set on it, even if they already exist:","    this.game;\t\t//\ta reference to the currently running game","    this.add;\t\t//\tused to add sprites, text, groups, etc","    this.camera;\t//\ta reference to the game camera","    this.cache;\t\t//\tthe game cache","    this.input;\t\t//\tthe global input manager (you can access this.input.keyboard, this.input.mouse, as well from it)","    this.load;\t\t//\tfor preloading assets","    this.math;\t\t//\tlots of useful common math operations","    this.sound;\t\t//\tthe sound manager - add a sound, play one, set-up markers, etc","    this.stage;\t\t//\tthe game stage","    this.time;\t\t//\tthe clock","    this.tweens;    //  the tween manager","    this.state;\t    //\tthe state manager","    this.world;\t\t//\tthe game world","    this.particles;\t//\tthe particle manager","    this.physics;\t//\tthe physics manager","    this.rnd;\t\t//\tthe repeatable random number generator","    //\tYou can use any of these from any function within this State.","    //\tBut do consider them as being 'reserved words', i.e. don't create a property for your own game called \"world\" or you'll over-write the world reference.","","    //world","    this.ground = null;","    this.ledge = null;","    this.background = null;","","};","","var hero;","var enemy;","var item;","var gui;","var pause;","","var grounds;","var walls;","var ledges;","var ledge_trigger;","","var game_timer = null;","var music = null;","","BasicGame.level_0.prototype = {","","\tcreate: function () {","","        //start the game timer","        game_timer = this.game.time.create(false);","        game_timer.start();","","        //start the music","        music = this.game.add.audio('song', 0.5, true);","        music.play();","","        //create pause instance","    \tpause = new Pause(this.game);","","        //build level","        this.build_world();","        this.build_player();","        this.build_enemies();","        this.build_items();","    \tthis.build_GUI();","    \t","\t},","","    build_world: function () {","","        //the world","        this.game.world.setBounds(0, 0, 3200, 600);","        this.game.physics.startSystem(Phaser.Physics.ARCADE);","","        //background","        this.background = this.add.tileSprite(0, -200, 6400, 600, 'background_far');","        this.background.fixedToCamera = true;","        this.background_near = this.add.tileSprite(0, 0, 6400, 600, 'background_near');","        ","        //the ground","        grounds = this.game.add.group();","        grounds.enableBody = true;","        ","    \tfor (var i = 0; i < this.game.world.width/800; i++)","        {","            this.ground = grounds.create(i * 800, this.world.height - 64, 'ground');","            this.ground.scale.setTo(2, 2);","            this.ground.body.immovable = true;","        }","    \t","    \t//the ledges","    \tledges = this.game.add.group();","        ledges.enableBody = true;","        ","    \tfor (var i = 1; i < this.game.world.width/800; i++)","        {","            this.ledge = ledges.create(i * 800, 400, 'ground');","            this.ledge.body.immovable = true;","        }","        ","    \tthis.ledge = ledges.create(184, 100, 'ground');","    \tthis.ledge.body.immovable = true;","    \t","    \t//the walls","    \twalls = this.game.add.group();","        walls.enableBody = true;","        ","    \tthis.ledge = walls.create(0, 100, 'wall');","    \tthis.ledge.body.immovable = true;","    \tthis.ledge = walls.create(200, 100, 'wall');","    \tthis.ledge.body.immovable = true;","        this.ledge.anchor.setTo(0.5, 0);","        this.ledge.scale.x = -1;","    \t","        //the ledge trigger (for enemies; transparent)","        ledge_trigger = this.game.add.group();","        ledge_trigger.enableBody = true;","","    \tfor (var i = 0; i < ledges.length; i++)","        {","            var x = ledges.getAt(i).x;","            var y = ledges.getAt(i).y;","            var xx = ledges.getAt(i).body.x + ledges.getAt(i).body.width;","            ","            //create 2 triggers, one for each end of a ledge","            this.trigger = ledge_trigger.create(x, y, 'singularity');","            this.trigger.body.immovable = true;","            this.trigger.anchor.setTo(1, 1);","            this.trigger.scale.setTo(10, 30);","            this.trigger.alpha = 0;","","            this.trigger = ledge_trigger.create(xx , y, 'singularity');","            this.trigger.body.immovable = true;","            this.trigger.anchor.setTo(0, 1);","            this.trigger.scale.setTo(10, 30);","            this.trigger.alpha = 0;","        }","    \t","    },","","    build_player: function () {","        ","        //create an instance for the player","        hero = new Hero(this.game); ","        ","        //create the player","        hero.create(50, 500);","    ","    }, ","","    build_enemies: function () {","    ","        //create an instance for the enemies","        enemy = new Enemy(this.game);","        ","        //create the enemies","        //type 0 = ninja","        enemy.create(0, 400, 400);","        enemy.create(0, 1500, 400);","        enemy.create(0, 1600, 400);","        enemy.create(0, 450, 40);","        enemy.create(0, 840, 300);","        ","        //type 1 = ghost","        enemy.create(1, 500, 40);","","    },","    ","    build_items: function () {","        ","        //create an instance for the items","        item = new Item(this.game);","        ","        //create the items","        //type 0 = katana_0","        item.create(0, 400, 80);","        ","        //type 1 = ruby (doesn't exist upon creation)","        item.create(1, null, null);","        ","    },","    ","    build_GUI: function () {","    ","        //create an instance for the GUI","        gui = new GUI(this.game);","        ","        //create the GUI","        gui.create();","    ","    }, ","","\tupdate: function () {","\t    ","\t    //update all necessary objects","        hero.update();","        enemy.update();","        item.update();","        gui.update(); ","","\t},","","    render: function () {","    ","    \t//for (var i = 0; i < ledge_trigger.length; i++)","    \t//this.game.debug.geom(ledge_trigger.getAt(i).getBounds());","","        //for (var i = 0; i < ninjas.length; i++)","        //this.game.debug.geom(aggro_trigger[i].getBounds());","        //this.game.debug.geom(ninjas.getAt(i).getBounds());","        ","        //this.game.debug.geom(aggro_trigger.getBounds());","        //this.game.debug.geom(katana_0.getBounds());","        //this.game.debug.timer(idle_timer[1], 200, 50);","        //this.game.debug.timer(run_timer[1], 200, 120);","","    },\t","    ","\tshutdown: function () {","\t    ","\t    player.destroy();","","        grounds.destroy(true, false);","        ledges.destroy(true, false);","        walls.destroy(true, false);","        ninjas.destroy(true, false);","        ghosts.destroy(true, false);","        items_group.destroy(true, false);","        ","        this.background.stopScroll();","        this.background.alive = false;","        this.background.exists = false;","        this.background.visible = false;","    ","        this.game.world.removeAll(); //just a sweeper","    ","        score = 0;","        music.stop();","        this.time.reset;","\t},","","};"]}]}],[{"group":"doc","deltas":[{"start":{"row":42,"column":16},"end":{"row":42,"column":17},"action":"remove","lines":["0"]}]}],[{"group":"doc","deltas":[{"start":{"row":42,"column":16},"end":{"row":42,"column":17},"action":"insert","lines":["1"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":16},"end":{"row":0,"column":17},"action":"remove","lines":["0"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":16},"end":{"row":0,"column":17},"action":"insert","lines":["1"]}]}]]},"ace":{"folds":[{"start":{"row":0,"column":37},"end":{"row":26,"column":0},"placeholder":"..."},{"start":{"row":44,"column":22},"end":{"row":64,"column":1},"placeholder":"..."},{"start":{"row":66,"column":30},"end":{"row":136,"column":4},"placeholder":"..."},{"start":{"row":138,"column":31},"end":{"row":146,"column":4},"placeholder":"..."},{"start":{"row":148,"column":32},"end":{"row":164,"column":4},"placeholder":"..."},{"start":{"row":166,"column":30},"end":{"row":178,"column":4},"placeholder":"..."},{"start":{"row":180,"column":28},"end":{"row":188,"column":4},"placeholder":"..."},{"start":{"row":190,"column":22},"end":{"row":198,"column":1},"placeholder":"..."},{"start":{"row":200,"column":25},"end":{"row":214,"column":4},"placeholder":"..."},{"start":{"row":216,"column":24},"end":{"row":237,"column":1},"placeholder":"..."}],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":30,"column":9},"end":{"row":30,"column":9},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1421893306767,"hash":"6a66f663252062278a7a71ce3521cf695a38ed04"}